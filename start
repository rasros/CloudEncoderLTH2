#!/bin/bash
if [ ${#@} -lt 2 ];
then
  echo "Usage: ./start key host ctprefix";
  exit 1;
fi;

O='2>&1 >/dev/null';
F=0;

while [ ${1:0:1} == '-' ];
do
  case $1 in
    -v)
      O="2>&1";
    ;;
    -q)
      O=">/dev/null 2>&1";
    ;;
    -f) # Fast - do not install requirements
      F=1;
    ;;
  *)
    echo "Unknown option "$1 >&2;
    exit 1;
  ;;
  esac;
  shift 1;
done;

# Arg 1: Private key
key=$1
# Arg 2: Host
host=$2

WS=.ws;

mkdir -p $WS;

shell() {
  eval $@ $O | tee -a ct.log;
}

die() {
  echo $@ >&2;
  exit 1;
}

echo "" > ct.log;

install_machine() {
  echo "# Install required software";
  # Ensure Python 2.7 and tools are installed
  shell ssh -i $key ubuntu@$host sudo apt-get install -y python2.7
  shell ssh -i $key ubuntu@$host sudo apt-get install -y python-setuptools
  shell ssh -i $key ubuntu@$host sudo apt-get install -y python2.7-dev

#  echo main ansible_host=$host ansible_user=ubuntu ansible_ssh_private_key_file=$key > .ansible.cfg;
}

install_application() {
  echo "# Create software archive";
  if shell git stash | grep '^HEAD';
    shell git archive HEAD -o $WS/cloudtranscoder.tar;
  then
    shell git archive 'stash@{0}' -o $WS/cloudtranscoder.tar;
    shell git stash pop;
  fi;
  shell gzip -f $WS/cloudtranscoder.tar;
  echo "# Send archive to remote";
  shell scp -i $key $WS/cloudtranscoder.tar.gz ubuntu@$host:;
  echo "# Unpack archive on remote";
  shell ssh -i $key ubuntu@$host "tar zxf cloudtranscoder.tar.gz";
  echo "# Install application on remote";
  shell ssh -i $key ubuntu@$host "sudo python setup.py install";
}

start_controller() {
  echo "# Copying OpenStack configuration";
  shell scp -i $key config.properties ubuntu@$host:;
  echo "# Start controller on remote";
  ssh -i $key ubuntu@$host "ctcontrol skarin";
}

test $F -eq 0 && install_machine;
install_application;
start_controller;
